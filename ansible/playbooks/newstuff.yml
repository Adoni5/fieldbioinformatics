---

  - name: install dogfish
    apt: name=ont-dogfish state=present allow_unauthenticated=yes

  - name: create basecalled directory
    file:
       path: /data/basecalled
       recurse: yes
       state: directory
       owner: "{{ localuser }}"
       group: "{{ localuser }}"

  - name: create dogfish log directory
    file:
       path: /var/log/dogfish
       state: directory
       owner: "{{ localuser }}"
       group: "{{ localuser }}"

  - name: dogfishd.service
    copy:
       src: ../configs/dogfishd.service
       dest: /etc/systemd/system/dogfishd.service

  - name: reload configs
    systemd: daemon_reload=yes

  - name: enable dogfishd
    systemd:
       name: dogfishd
       enabled: True 

  - name: desktop icon directoy
    file:
       path: /home/{{ localuser }}/.local/share/icons
       state: directory
       owner: "{{ localuser }}"
       group: "{{ localuser }}"

  - name: copy desktop icons
    copy:
       src: ../icons/{{icon}}.png
       dest: /home/{{ localuser }}/.local/share/icons/{{icon}}.png
    loop_control:
       loop_var: icon
    loop:
       - minknow
       - tablet-gui-tablet

  - name: copy desktop files
    copy:
       src: ../configs/{{programme}}.desktop
       dest: /home/{{ localuser }}/.local/share/applications/{{programme}}.desktop
    loop_control:
       loop_var: programme
    loop:
       - minknow
       - tablet-gui-tablet

  - name: add desktop favorites
    script: ../scripts/add_favorites_to_unity.py {{programme}}.desktop a
    become_user: "{{ localuser }}"
    become: yes
    loop_control:
       loop_var: programme
    loop:
       - minknow
       - tablet-gui-tablet

#2. **Clone the github repo** -- `git clone https://github.com/artic-network/rampart.git`
#3. **Create & activate the conda environment**
#```
#cd rampart
#conda env create -f environment.yml
#source activate artic-rampart
#cd ..
#```
#
#4. Install Node / JavaScript dependencies
#```
#cd rampart
#yarn
#cd ..
#```

#5. **Install Andrew's fork of porechop**
#* (make sure you're in the artic-rampart conda environment)
#```
#git clone https://github.com/rambaut/Porechop.git
#cd Porechop/
#python setup.py install
#```
#* Check `porechop` is available on the command line by running `porechop -h` inside the artic-rampart conda environment.

  - name: grab miniconda installer
    get_url: url=https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh dest=/tmp/miniconda.sh mode=0755
    become: yes
    become_user: "{{ localuser }}"

  - name: test if conda is installed
    stat: path="~/miniconda3/bin/conda"
    register: condainstalled
    become: yes
    become_user: "{{ localuser }}"

  - name: remove partial install
    command: rm -rf ~/miniconda3
    when: not condainstalled.stat.exists
    become: yes
    become_user: "{{ localuser }}"

  - name: install conda if not installed
    command: /tmp/miniconda.sh -b
    when: not condainstalled.stat.exists
    become: yes
    become_user: "{{ localuser }}"

  - name: check if conda is in PATH
    shell: "grep miniconda3 ~/.bashrc"
    register: condainpath
    ignore_errors: true
    become: yes
    become_user: "{{ localuser }}"

  - name: add conda to PATH
    lineinfile: path="/home/{{ localuser }}/.bashrc" line="export PATH=/home/{{ localuser }}/miniconda3/bin:$PATH"
    when: condainpath.stdout == ""
    become: yes
    become_user: "{{ localuser }}"

  - name: precreate conda dir
    file: path="/home/{{ localuser }}/.conda/pkgs" owner="{{ localuser }}" group="{{ localuser }}" state=directory
    become: yes
    become_user: "{{ localuser }}"

  - name: precreate conda environments.txt
    file: path="/home/{{ localuser }}/.conda/environments.txt" owner="{{ localuser }}" group="{{ localuser }}" state=touch
    become: yes
    become_user: "{{ localuser }}"

  - name: add extra conda channels
    command: "/home/{{ localuser }}/miniconda3/bin/conda config --add channels bioconda"
    become: yes
    become_user: "{{ localuser }}"

  - name: install conda packages
    command: "/home/{{ localuser }}/miniconda3/bin/conda install -y {{ pkg }}"
    loop_control:
       loop_var: pkg
    loop:
       - tablet
    become: yes
    become_user: "{{ localuser }}"

  - name: clone rampart github
    git: repo=https://github.com/artic-network/rampart.git dest=/home/{{ localuser }}/artic/rampart force=yes
    become: yes
    become_user: "{{ localuser }}"

  - name: test if conda is installed
    stat: path="/home/{{ localuser }}/miniconda3/envs/artic-rampart"
    register: condarampartinstalled
    become: yes
    become_user: "{{ localuser }}"

  - name: create conda environment for rampart
    command: "/home/{{ localuser }}/miniconda3/bin/conda env create -f /home/{{ localuser }}/artic/rampart/environment.yml"
    become: yes
    become_user: "{{ localuser }}" 
    when: not condarampartinstalled.stat.exists

  - name: rampart yarn
    shell: source /home/{{ localuser }}/miniconda3/bin/activate artic-rampart && cd /home/{{ localuser }}/artic/rampart && yarn
    become: yes
    become_user: "{{ localuser }}"
    args:
       executable: /bin/bash

  - name: rambaut porechop fork github
    git: repo=https://github.com/rambaut/Porechop.git dest=/home/{{ localuser }}/artic/porechop force=yes
    become: yes
    become_user: "{{ localuser }}"

  - name: install porechop
    shell: source /home/{{ localuser }}/miniconda3/bin/activate artic-rampart && cd /home/{{ localuser }}/artic/porechop && python setup.py install
    become: yes
    become_user: "{{ localuser }}"
    args:
       executable: /bin/bash

  - name: clone artic-outbreak github
    git: repo=https://github.com/artic-network/artic-workshop.git dest=/home/{{ localuser }}/artic/workshop force=yes
    become: yes
    become_user: "{{ localuser }}"

  - name: test if conda is installed
    stat: path="/home/{{ localuser }}/miniconda3/envs/artic-workshop"
    register: condaworkshopinstalled
    become: yes
    become_user: "{{ localuser }}"

  - name: conda workshop environment
    command: "/home/{{ localuser }}/miniconda3/bin/conda env create -f /home/{{ localuser }}/artic/workshop/environment.yml"
    become: yes
    become_user: "{{ localuser }}"
    when: not condaworkshopinstalled.stat.exists

  - name: artic pipeline
    git: repo=https://github.com/artic-network/fieldbioinformatics.git dest=/home/{{ localuser }}/artic/fieldbioinformatics force=yes
    become: yes
    become_user: "{{ localuser }}"

  - name: install artic pipeline
    shell: source /home/{{ localuser }}/miniconda3/bin/activate artic-workshop && cd  /home/{{ localuser }}/artic/fieldbioinformatics && python setup.py install
    become: yes
    become_user: "{{ localuser }}"
    args:
       executable: /bin/bash


